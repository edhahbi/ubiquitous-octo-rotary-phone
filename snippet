 		
#include <bits/stdc++.h>
using namespace std;

// Types
#define ull unsigned long long int
#define ll long long
#define char unsigned char
#define INF 1e18

// Data Structures
#define ii pair<int,int>
#define vii vector<ii>
#define vi vector<int>
#define vl vector<ll>
#define mii map<int,int>
#define umii unordered_map<int,int>
#define prioi priority_queue<int>
#define minh priority_queue<int,vector<int>,greater<int>>
#define maxh prioi

// Useful Macros
#define ff first
#define ss second
#define fast_io ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define endl "\n"
#define pb push_back
#define pob pop_back
#define pf push_front
#define pof pop_front


// Functions
#define all(x) x.begin(),x.end()
#define fr(i,a,b) for(int i = a; i <= b; i++)
#define lcm(a,b) (a * b / __gcd(a, b))
#define sz(a) ((int)(a).size())
#define print(x) cout << x << "\n";
#define scanv(v,n) for(int i = 0; i < n; i++) cin >> v[i];
#define printv(v) for(auto it : v) cout << it << " ";
#define rall(v) v.rbegin(), v.rend()

// Runtime
#define Time cerr << "\nTime Taken : " << (float)(clock() - time_p) / CLOCKS_PER_SEC << "\n";
clock_t time_p = clock();

int solve() {

    return 0;
}

int32_t main() {
    fast_io;

    #ifdef ONPC
        auto start_time = chrono::steady_clock::now();
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        freopen("error.txt", "w", stderr);
    #endif

    int t;
    cin >> t;
    while(t--) {
        solve();
    }

    #ifdef ONPC
        cerr << "______________________" << endl;
        auto end_time = chrono::steady_clock::now();
        cerr << "Finished in "
             << chrono::duration_cast<chrono::milliseconds>(end_time - start_time).count()
             << " ms" << endl;
    #endif

    return 0;
}
